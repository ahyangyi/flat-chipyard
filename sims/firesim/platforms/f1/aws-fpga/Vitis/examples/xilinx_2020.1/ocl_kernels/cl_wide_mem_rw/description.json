{
    "name": "Wide Memory Read/Write (OpenCL Kernel)", 
    "description": [
        "This is simple example of vector addition to demonstrate Wide Memory Access using uint16 data type. Based on input argument type, V++ compiler will figure our the memory datawidth between Global Memory and Kernel. For this example, uint16 datatype is used, so Memory datawidth will be 16 x (integer bit size) = 16 x 32 = 512 bit."
    ],
    "flow": "vitis",
    "keywords": [
        "uint16", 
        "xcl_pipeline_loop"
    ], 
    "key_concepts": [
        "Kernel to DDR", 
        "wide memory access", 
        "burst read and write"
    ], 
    "ndevice": [
	"zc702"
    ],
    "platform_blacklist": [
	"zc702"
    ],
    "os": [
        "Linux"
    ], 
    "runtime": [
        "OpenCL"
    ], 
    "host": {
        "host_exe": "cl_wide_mem_rw",
        "compiler": {
            "sources": [
                "REPO_DIR/common/includes/xcl2/xcl2.cpp",
                "./src/host.cpp"
            ], 
            "includepaths": [
                "REPO_DIR/common/includes/xcl2"
            ]
        }
    }, 
    "containers": [
        {
            "accelerators": [
                {
                    "name": "vadd", 
                    "location": "src/vadd.cl"
                }
            ], 
            "name": "vadd"
        }
    ], 
    "launch": [
        {
            "cmd_args": "BUILD/vadd.xclbin", 
            "name": "generic launch for all flows"
        }
    ], 
    "contributors": [
        {
            "url": "http://www.xilinx.com", 
            "group": "Xilinx"
        }
    ],
    "testinfo": {
        "disable": false,
        "jobs": [
            {
                "index": 0,
                "dependency": [],
                "env": "",
                "cmd": "",
                "max_memory_MB": 32768,
                "max_time_min": 300
            }
        ],
        "targets": [
            "vitis_sw_emu",
            "vitis_hw_emu",
            "vitis_hw"
        ],
        "category": "canary"
    }
}
